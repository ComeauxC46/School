#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 0
\use_package esint 0
\use_package mathdots 1
\use_package mathtools 0
\use_package mhchem 1
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1in
\topmargin 1in
\rightmargin 1in
\bottommargin 1in
\headheight 0in
\headsep 0in
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\align left

\series bold
\size large
CSCE 221 Cover Page
\series default
\size default

\begin_inset Newline newline
\end_inset

 Homework Assignment #2
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\align left
First Name
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Chris
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Last Name 
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Comeaux
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

UIN
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

622006681
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\align left
User Name 
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

cmc236
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

E-mail address
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

cmc236@tamu.edu
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\align left
Please list all sources in the table below including web pages which you
 used to solve or implement the current homework.
 If you fail to cite sources you can get a lower number of points or even
 zero, read more on Aggie Honor System Office website: 
\family typewriter

\begin_inset CommandInset href
LatexCommand href
target "http://aggiehonor.tamu.edu/"

\end_inset


\family default

\begin_inset VSpace defskip
\end_inset


\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="10" columns="5">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Type of sources 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
People
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Web pages (provide URL) 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
www.chegg.com
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Printed material
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Lecture Slides
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Other Sources 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\align left
\begin_inset VSpace defskip
\end_inset


\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\align left
I certify that I have listed all the sources that I used to develop the
 solutions/codes in the submitted work.
\end_layout

\begin_layout Standard
\align left

\emph on
On my honor as an Aggie, I have neither given nor received any unauthorized
 help on this academic work
\emph default
.
\end_layout

\begin_layout Standard
\align left
\begin_inset VSpace bigskip
\end_inset


\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\align left
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="6">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Your Name 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Chris
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Comeaux
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Date 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

3/24/2016
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\align left
\begin_inset Newpage newpage
\end_inset


\series bold
Homework 2
\end_layout

\begin_layout Standard
\align left

\series bold
due March 27 at 11:59 pm.
\end_layout

\begin_layout Enumerate
\align left
(10 points) Describe (in pseudo code) how to implement the stack ADT using
 two queues.
 What is the running time of the push and pop functions in this implementation?
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
newline
\backslash
newline$
\end_layout

\end_inset


\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\align left
Let Q1 represent the first queue and Q2 represents the second queue.
\end_layout

\begin_layout Plain Layout
\align left

\series bold
push(T)
\series default
{// T is the key being inserted
\end_layout

\begin_layout Plain Layout
\align left
Q1.enqueue(T)}
\end_layout

\begin_layout Plain Layout
\align left

\series bold
pop(T){ 
\series default
//T is the key being removed
\end_layout

\begin_layout Plain Layout
\align left
\begin_inset space \qquad{}
\end_inset

while(Q1.size() >1)
\end_layout

\begin_layout Plain Layout
\align left
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

Q2.enqueue(Q1.dequeue())
\end_layout

\begin_layout Plain Layout
\align left
\begin_inset space \qquad{}
\end_inset

s = Q1.dequeue()
\end_layout

\begin_layout Plain Layout
\align left
\begin_inset space \qquad{}
\end_inset

while(Q2.size() > 0)
\end_layout

\begin_layout Plain Layout
\align left
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

Q1.enqueue(Q2.dequeue())
\end_layout

\begin_layout Plain Layout
\align left
\begin_inset space \qquad{}
\end_inset

return s
\end_layout

\begin_layout Plain Layout
\align left
}
\end_layout

\begin_layout Plain Layout
\align left

\series bold
Push: 
\series default
O(1)
\end_layout

\begin_layout Plain Layout
\align left

\series bold
Pop:
\series default
 It will take 2n-1 operations to dequeue n-1 elements from Q1 and enqueue
 n-1 elements to Q2.
 Then it will take 1 operation to copy the last element into a variable.
 It will then take 2n operations to dequeue n elements from Q2 and enqueue
 n-1 elements to Q2.
 So f(n) = 2n-1+1+2n = 4n = O(n)
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
\align left
(10 points) Solve C-5.8 on p.
 224
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
newline
\backslash
newline$
\end_layout

\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\align left
To evaluate an expression in post fix form without a recursive function
 you must use a stack.
 When the algorithm comes across a number or a variable it will push it
 on the stack.
 When the algorithm comes across an operation it will pop off the correct
 number of operands, according to the operator, perform the operation, and
 push the answer back on the stack.
 It will continue in this manner until the whole expression has been visited
 and the answer is the only element in the stack(using a loop).
\end_layout

\end_inset


\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Enumerate
\align left
(10 points) Linked list questions.
\end_layout

\begin_deeper
\begin_layout Enumerate
\align left
Write a recursive function in C++ that counts the number of nodes in a singly
 linked list.
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
newline$
\end_layout

\end_inset

 
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
int count = 0; //accumalator initilized in global scope so it is evaluated
 once
\end_layout

\begin_layout Plain Layout
int SinglyLinkedList::size(SListNode* Node){ //pass in the first node of
 list to start
\end_layout

\begin_layout Plain Layout
{
\end_layout

\begin_layout Plain Layout
\begin_inset space \qquad{}
\end_inset

if(Node==NULL) return count;
\end_layout

\begin_layout Plain Layout
\begin_inset space \qquad{}
\end_inset

count++; //update accumalator
\end_layout

\begin_layout Plain Layout
\begin_inset space \qquad{}
\end_inset

return size(Node->getNext()); // call again with next node
\end_layout

\begin_layout Plain Layout
}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
\align left
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
newline$
\end_layout

\end_inset

Write a recurrence relation that represents the running time for your algorithm.
 
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
newline$
\end_layout

\end_inset

T(n) =T(n-1) +1, T(0) = 0 where n is the number of nodes and k max = n.
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
\align left
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
newline$
\end_layout

\end_inset

Solve this relation and provide the classification of the algorithm using
 the Big-O asymptotic notation.
\end_layout

\begin_deeper
\begin_layout Standard
\align left
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
T(n) =T(n-1) +1
\end_layout

\begin_layout Plain Layout
T(n) =T(n-2) +2
\end_layout

\begin_layout Plain Layout
T(n) =T(n-3) +3
\end_layout

\begin_layout Plain Layout
.
\end_layout

\begin_layout Plain Layout
.
\end_layout

\begin_layout Plain Layout
.
\end_layout

\begin_layout Plain Layout
T(n) =T(n-k) +k
\end_layout

\begin_layout Plain Layout
===>
\end_layout

\begin_layout Plain Layout
T(n) =T(0) +n
\end_layout

\begin_layout Plain Layout
T(n) =n = O(n)
\end_layout

\end_inset


\begin_inset Newpage newpage
\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate
\align left
(10 points) Write a recursive  function that finds the maximum value in
 an array of integers without using any loops.
 
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\align left
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
newline$
\end_layout

\end_inset

int findMax(int A[], int size, int Max){
\end_layout

\begin_layout Plain Layout
\align left
\begin_inset space \qquad{}
\end_inset

if(size == 1){
\end_layout

\begin_layout Plain Layout
\align left
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

if(A[0]>Max) return Max;
\end_layout

\begin_layout Plain Layout
\align left
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

else return Max;
\end_layout

\begin_layout Plain Layout
\align left
\begin_inset space \qquad{}
\end_inset

else if(size==0){
\end_layout

\begin_layout Plain Layout
\align left
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

cout<<
\begin_inset Quotes erd
\end_inset

range error
\backslash
n
\begin_inset Quotes erd
\end_inset

;
\end_layout

\begin_layout Plain Layout
\align left
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

return -1;
\end_layout

\begin_layout Plain Layout
\align left
\begin_inset space \qquad{}
\end_inset

}
\end_layout

\begin_layout Plain Layout
\align left
\begin_inset space \qquad{}
\end_inset

else if(A[size-1]>Max)
\end_layout

\begin_layout Plain Layout
\align left
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

return findMax(A,size-1,A[size-1]);
\end_layout

\begin_layout Plain Layout
\align left
\begin_inset space \qquad{}
\end_inset

else if(A[size-1]<Max)
\end_layout

\begin_layout Plain Layout
\align left
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

return findMax(A,size-1,Max);
\end_layout

\begin_layout Plain Layout
\align left
}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
\align left
Write a recurrence relation that represents running time of your algorithm.
 
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\align left
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
newline$
\end_layout

\end_inset

T(n) = T(n-1)+1, T(1) = 1, kmax=n+1, where n is the number of nodes
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
newline$
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
\align left
Solve this relation and classify the algorithm using the Big-O asymptotic
 notation.
\end_layout

\begin_deeper
\begin_layout Standard
\align left
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
T(n)=T(n-1)+1
\end_layout

\begin_layout Plain Layout
T(n-1) = T(n-2) +1+1
\end_layout

\begin_layout Plain Layout
T(n-2) = T(n-3)+1+1+1
\end_layout

\begin_layout Plain Layout
.
\end_layout

\begin_layout Plain Layout
.
\end_layout

\begin_layout Plain Layout
.
\end_layout

\begin_layout Plain Layout
T(kmax) = T(1)+n+1 = n+2 = O(n)
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate
\align left
(10 points) Consider the quick sort algorithm.
 
\end_layout

\begin_deeper
\begin_layout Enumerate
\align left
Provide an example of the inputs and the values of the pivot point for the
 best, worst and average cases for the quick sort.
 
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
newline$
\end_layout

\end_inset


\series bold
Average:
\series default
 if the input id unsorted an the pivot point is the maximum or minimum element.
\end_layout

\begin_layout Plain Layout

\series bold
Worst: 
\series default
If the input is sorted and the pivot is maximum or minimum element.
\end_layout

\begin_layout Plain Layout

\series bold
Best: 
\series default
Quick sort is the fastest when the input is sorted or unsorted and the pivot
 point is in the middle of the list.
 
\end_layout

\end_inset


\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Enumerate
\align left
Write a recursive relation for running time function and its solution for
 each case.
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
newline$
\end_layout

\end_inset


\series bold
Average:
\series default
 If the left side of the pivot has (a x n) elements and the right side has
 (1-a)n elements.
\end_layout

\begin_layout Plain Layout
T(n) = T(a x n) + T((1-a)n) +n where a <=0.5 then O(nlog(n))
\end_layout

\begin_layout Plain Layout

\series bold
Worst: 
\series default
T(n) = T(n-1) + n T(1) = 0
\end_layout

\begin_layout Plain Layout
.
\end_layout

\begin_layout Plain Layout
.
\end_layout

\begin_layout Plain Layout
.
\end_layout

\begin_layout Plain Layout
T(1) + 2 + 3 + 4 +...+ (n-2) + (n-1) + n = 
\begin_inset Formula ${\displaystyle \sum_{i}^{n}i}=1-\frac{n(n-1)}{2}=O(n^{2})$
\end_inset

 (NOTE: i = 2 in sigma)
\end_layout

\begin_layout Plain Layout

\series bold
Best: 
\series default
T(n) = 2
\begin_inset Formula $T(\frac{n}{2})$
\end_inset

+n, T(1) =0
\end_layout

\begin_layout Plain Layout
Using Master Theorem: a=2, b=2, f(n) = n 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $n^{log_{2}2}=n=f(n)$
\end_inset

, therefore it is case 2.
\end_layout

\begin_layout Plain Layout
T(n) = O(
\begin_inset Formula $n^{log_{2}2}*log_{2}n$
\end_inset

)= O(
\begin_inset Formula $nlog_{2}n$
\end_inset

)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
\align left
(10 points) Consider the merge sort algorithm.
\end_layout

\begin_deeper
\begin_layout Enumerate
\align left
Write a recurrence relation for running time function for the merge sort.
 
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
newline$
\end_layout

\end_inset

The recurrence relation for the running time of merge sort is T(n) = 2
\begin_inset Formula $T(\frac{n}{2})$
\end_inset

+n, T(1) =0
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
\align left
Use two methods to solve the recurrence relation.
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
newline
\backslash
newline$
\end_layout

\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename 6b.png
	scale 50

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
\align left
What is the best, worst and average running time of the merge sort algorithm?
 Justify your answer.
 
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
newline$
\end_layout

\end_inset

Merge sort does not have a best/worst/average case.
 In every case it runs O(
\begin_inset Formula $nlog_{2}n$
\end_inset

).
 However, the downside is that merge sort must use more memory because the
 array must be copied everytime.
\end_layout

\end_inset


\begin_inset Newpage newpage
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
\align left
(10 points) R-10.17 p.
 493
\begin_inset Newline newline
\end_inset

For the following statements about red-black trees, provide a justification
 for each true statement and a counterexample for each false one.
\end_layout

\begin_deeper
\begin_layout Enumerate
\align left
A subtree of a red-black tree is itself a red-black tree.
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\series bold
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
newline$
\end_layout

\end_inset

Fasle.
 
\series default
The root of a red-black tree must be black, however a subtree of a red-black
 tree may have a red root and therefore cannot be a red-black tree
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
\align left
The sibling of an external node is either external or it is red.
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\series bold
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
newline$
\end_layout

\end_inset

True.
 
\series default
The black depth of a node is h and the depth of an external node is h+1
 so its sibling must either a black external node or a red node.
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
\align left
There is a unique (2,4) tree associated with a given red-black tree.
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\series bold
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
newline$
\end_layout

\end_inset

True.
 
\series default
A node with 2 red children can be represented by a 4-node, a node with 1
 red child can be represented with a 3-node, and a node with no red children
 can be represented with a 2-node.
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
\align left
There is a unique red-black tree associated with a given (2,4) tree.
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\align left

\series bold
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
newline$
\end_layout

\end_inset

False.
 
\series default
A 3-node can be represented in more than one way in a red-black tree.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
\align left
(10 points) R-10.19 p.
 493
\begin_inset Newline newline
\end_inset

Consider a tree 
\begin_inset Formula $T$
\end_inset

 storing 100,000 entries.
 What is the worst-case height of 
\begin_inset Formula $T$
\end_inset

 in the following cases?
\end_layout

\begin_deeper
\begin_layout Enumerate
\align left
\begin_inset Formula $T$
\end_inset

 is an AVL tree.
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
newline$
\end_layout

\end_inset


\begin_inset Formula $1.44log_{2}(100000+1)=1.44log_{2}(100001)=23.9179032\approx24$
\end_inset

.
 The worst case height of a AVL tree with 100000 elements would be 24.
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
\align left
\begin_inset Formula $T$
\end_inset

 is a (2,4) tree.
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
newline$
\end_layout

\end_inset


\begin_inset Formula $log_{2}(100000+1)=log_{2}(100001)=16.609655\approx17$
\end_inset

.
 The worst case height of a (2-4) tree with 100000 elements would be 17.
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
\align left
\begin_inset Formula $T$
\end_inset

 is a red-black tree.
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
newline$
\end_layout

\end_inset


\begin_inset Formula $2log_{2}(100000+1)=2log_{2}(100001)=33.21931\approx33$
\end_inset

.
 The worst case height of a red-black tree with 100000 elements would be
 33.
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
\align left
\begin_inset Formula $T$
\end_inset

 is a binary search tree.
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
newline$
\end_layout

\end_inset

The worst case height for a binary search tree is O(n) (linear binary search
 tree).
 Therefore for 100000 elements, the worst case height is 100000.
\end_layout

\end_inset


\begin_inset Newpage newpage
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
\align left
(10 points) R-9.16 p.
 418
\end_layout

\begin_deeper
\begin_layout Standard
\align left
Draw an example skip list that results from performing the following series
 of operations on the skip list shown in Figure 9.12: 
\family typewriter
erase(
\family default
38
\family typewriter
), insert(
\family default
48,x
\family typewriter
), insert(
\family default
24,y
\family typewriter
), erase(
\family default
55
\family typewriter
)
\family default
.
 Record your coin flips, as well.
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
newline
\backslash
newline$
\end_layout

\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\align left
\begin_inset Graphics
	filename 9.png
	scale 75

\end_inset


\end_layout

\end_inset


\begin_inset Newpage newpage
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
\align left
(10 points) R-9.7 p.
 417
\end_layout

\begin_deeper
\begin_layout Standard
\align left
Draw the 11-entry hash table that results from using the has function, 
\begin_inset Formula $h(k)=(3k+5)$
\end_inset

 mod 11, to hash the keys 12, 44, 13, 88, 23, 94, 11, 39, 20, 16, and 5,
 assuming collisions are handled by chaining.
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
newline
\backslash
newline$
\end_layout

\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\align left
\begin_inset Graphics
	filename 10.png
	scale 75

\end_inset


\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
\align left
(10 points) R-9.8 p.
 417
\end_layout

\begin_deeper
\begin_layout Standard
\align left
What is the result of the previous exercise, assuming collisions are handled
 by linear probing?
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
newline
\backslash
newline$
\end_layout

\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\align left
\begin_inset Graphics
	filename 11.png

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
newline$
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newpage newpage
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
\align left
(10 points) R-9.10 p.
 417 
\end_layout

\begin_deeper
\begin_layout Standard
\align left
What is the result of Exercise R-9.7, when collisions are handled by double
 hashing using the secondary hash function 
\begin_inset Formula $h_{s}(k)=7-(k$
\end_inset

 mod 
\begin_inset Formula $7)$
\end_inset

?
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
newline
\backslash
newline$
\end_layout

\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\align left
\begin_inset Graphics
	filename 12.png
	scale 75

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
newline$
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\align left
\begin_inset Note Note
status collapsed

\begin_layout Enumerate
(10 points) R-8.2 p.
 361
\end_layout

\begin_deeper
\begin_layout Plain Layout
How long would it take to remove 
\begin_inset Formula $\left\lceil log\,n\right\rceil $
\end_inset

 smallest elements from a heap that contains 
\begin_inset Formula $n$
\end_inset

 entries using the 
\family typewriter
removeMin()
\family default
 operation?
\begin_inset VSpace 0.5in
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
(10 points) R-8.7 p.
 361
\end_layout

\begin_deeper
\begin_layout Plain Layout
An airport is developing a computer simulation of air-traffic control that
 handles events such as landings and takeoffs.
 Each event has a 
\emph on
time-stamp 
\emph default
that denotes the time when the event occurs.
 The simulation program needs to efficiently perform the following two fundament
al operations:
\end_layout

\begin_layout Itemize
Insert an event with a given time-stamp (that is, add a future event)
\end_layout

\begin_layout Itemize
Extract the event with smallest time-stamp (that is, determine the next
 event to process)
\end_layout

\begin_layout Plain Layout
Which data structure should be used for the above operations? Why?
\begin_inset VSpace 0.5in
\end_inset


\end_layout

\end_deeper
\end_inset


\end_layout

\end_body
\end_document
